//#include <algorithm>

//TOOL KIT
//#include "DDSTextureLoader.h"
//#include "SimpleMath.h"

//using namespace SimpleMath;

void CreateObjects() {
	loadHeightMap("Objects/Heightmaps/halv_island.bmp");

	loadMultiTextureMap("Objects/Heightmaps/halv_islandMT.bmp");


	LoadObjectFile("Objects/OBJs/fish.obj", XMINT3(0, 20, 0));


	LoadObjectFile("Objects/OBJs/Mars.obj", XMINT3(5, 25, 5));


	LoadObjectFile("Objects/OBJs/Moon.obj", XMINT3(0, 25, -5));


	LoadObjectFile("Objects/OBJs/trex.obj", XMINT3(460, -240, 95));

	LoadObjectFile("Objects/OBJs/RedHerring.obj", XMINT3(0, 50, 0));

	D3D11_BUFFER_DESC bufferDesc;
	memset(&bufferDesc, 0, sizeof(bufferDesc));
	bufferDesc.ByteWidth = sizeof(ReflectionAmount);
	bufferDesc.Usage = D3D11_USAGE_DEFAULT;
	bufferDesc.BindFlags = D3D11_BIND_CONSTANT_BUFFER;


	//D3D11_SUBRESOURCE_DATA data;
	//data.pSysMem = gReflection;

	for (int i = 0; i < OBJECTS; i++)
	{
		D3D11_SUBRESOURCE_DATA data;
		data.pSysMem = &gReflection[i];

		gDevice->CreateBuffer(&bufferDesc, &data, &reflectionBuffers[i]);
	}
}


void RenderWireframe() {
	// clear the back buffer to a black
	float clearColor[] = { 0.0f, 0.0f, 0.0f, 0.0f };

	setWireframeShaders();

	gDeviceContext->ClearRenderTargetView(gBackbufferRTV, clearColor);

	// make sure our depth buffer is cleared to black each time we render
	gDeviceContext->ClearDepthStencilView(gDepth, D3D11_CLEAR_DEPTH, 1.0f, 0);

	gDeviceContext->VSSetConstantBuffers(0, 1, &gWorldMatrixBuffer);
	gDeviceContext->GSSetConstantBuffers(0, 1, &gRenderingOptionsBuffer);
	gDeviceContext->GSSetConstantBuffers(1, 1, &gCameraMatrixBuffer);

	updateCameraValues();
	setCameraViewProjectionSpace();

	//set world space for height map and update wvp matrix
	//set specular for height map
	setWorldSpace({ 0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,1.0f,1.0f,1.0f });
	updateCameraWorldViewProjection();

	//Render heightmap
	setVertexBuffer(heightmapBuffer, sizeof(TriangleVertex), 0);
	gDeviceContext->Draw(nrOfHMVert, 0);

	for (int i = 0; i < nrOfVertexBuffers; i++) {
		setWorldSpace({ 0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,1.0f,1.0f,1.0f });
		updateCameraWorldViewProjection();

		//Render objects
		setVertexBuffer(ppVertexBuffers[i], sizeof(TriangleVertex), 0);
		gDeviceContext->Draw(gnrOfVert[i], 0);
	}

	gDeviceContext->VSSetConstantBuffers(0, 1, &nullCB);
	gDeviceContext->GSSetConstantBuffers(0, 1, &nullCB);
	gDeviceContext->GSSetConstantBuffers(1, 1, &nullCB);
}



/*
void CreateDeferredQuad() {
	PositionVertex triangleVertices[6] =
	{
		-1, -1,	//v0 pos
		-1, 1,	//v1 pos
		1, -1,    //v2 pos

				  //----//

				  1, 1, 	//v3 pos
				  1, -1,	//v4 pos
				  -1, 1,    //v5 pos
	};

	// Describe the Vertex Buffer
	D3D11_BUFFER_DESC bufferDesc;
	memset(&bufferDesc, 0, sizeof(bufferDesc));
	// what type of buffer will this be?
	bufferDesc.BindFlags = D3D11_BIND_VERTEX_BUFFER;
	// what type of usage (press F1, read the docs)
	bufferDesc.Usage = D3D11_USAGE_DEFAULT;
	// how big in bytes each element in the buffer is.
	bufferDesc.ByteWidth = sizeof(PositionVertex) * 6;

	// this struct is created just to set a pointer to the
	// data containing the vertices.
	D3D11_SUBRESOURCE_DATA data;
	data.pSysMem = triangleVertices;

	// create a Vertex Buffer
	gDevice->CreateBuffer(&bufferDesc, &data, &gDeferredQuadBuffer);
}
*/