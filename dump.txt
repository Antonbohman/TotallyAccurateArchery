//#include <algorithm>

//TOOL KIT
//#include "DDSTextureLoader.h"
//#include "SimpleMath.h"

//using namespace SimpleMath;

void CreateObjects() {
	loadHeightMap("Objects/Heightmaps/halv_island.bmp");

	loadMultiTextureMap("Objects/Heightmaps/halv_islandMT.bmp");


	LoadObjectFile("Objects/OBJs/fish.obj", XMINT3(0, 20, 0));


	LoadObjectFile("Objects/OBJs/Mars.obj", XMINT3(5, 25, 5));


	LoadObjectFile("Objects/OBJs/Moon.obj", XMINT3(0, 25, -5));


	LoadObjectFile("Objects/OBJs/trex.obj", XMINT3(460, -240, 95));

	LoadObjectFile("Objects/OBJs/RedHerring.obj", XMINT3(0, 50, 0));

	D3D11_BUFFER_DESC bufferDesc;
	memset(&bufferDesc, 0, sizeof(bufferDesc));
	bufferDesc.ByteWidth = sizeof(ReflectionAmount);
	bufferDesc.Usage = D3D11_USAGE_DEFAULT;
	bufferDesc.BindFlags = D3D11_BIND_CONSTANT_BUFFER;


	//D3D11_SUBRESOURCE_DATA data;
	//data.pSysMem = gReflection;

	for (int i = 0; i < OBJECTS; i++)
	{
		D3D11_SUBRESOURCE_DATA data;
		data.pSysMem = &gReflection[i];

		gDevice->CreateBuffer(&bufferDesc, &data, &reflectionBuffers[i]);
	}
}


void RenderWireframe() {
	// clear the back buffer to a black
	float clearColor[] = { 0.0f, 0.0f, 0.0f, 0.0f };

	setWireframeShaders();

	gDeviceContext->ClearRenderTargetView(gBackbufferRTV, clearColor);

	// make sure our depth buffer is cleared to black each time we render
	gDeviceContext->ClearDepthStencilView(gDepth, D3D11_CLEAR_DEPTH, 1.0f, 0);

	gDeviceContext->VSSetConstantBuffers(0, 1, &gWorldMatrixBuffer);
	gDeviceContext->GSSetConstantBuffers(0, 1, &gRenderingOptionsBuffer);
	gDeviceContext->GSSetConstantBuffers(1, 1, &gCameraMatrixBuffer);

	updateCameraValues();
	setCameraViewProjectionSpace();

	//set world space for height map and update wvp matrix
	//set specular for height map
	setWorldSpace({ 0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,1.0f,1.0f,1.0f });
	updateCameraWorldViewProjection();

	//Render heightmap
	setVertexBuffer(heightmapBuffer, sizeof(TriangleVertex), 0);
	gDeviceContext->Draw(nrOfHMVert, 0);

	for (int i = 0; i < nrOfVertexBuffers; i++) {
		setWorldSpace({ 0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,1.0f,1.0f,1.0f });
		updateCameraWorldViewProjection();

		//Render objects
		setVertexBuffer(ppVertexBuffers[i], sizeof(TriangleVertex), 0);
		gDeviceContext->Draw(gnrOfVert[i], 0);
	}

	gDeviceContext->VSSetConstantBuffers(0, 1, &nullCB);
	gDeviceContext->GSSetConstantBuffers(0, 1, &nullCB);
	gDeviceContext->GSSetConstantBuffers(1, 1, &nullCB);
}



/*
void CreateDeferredQuad() {
	PositionVertex triangleVertices[6] =
	{
		-1, -1,	//v0 pos
		-1, 1,	//v1 pos
		1, -1,    //v2 pos

				  //----//

				  1, 1, 	//v3 pos
				  1, -1,	//v4 pos
				  -1, 1,    //v5 pos
	};

	// Describe the Vertex Buffer
	D3D11_BUFFER_DESC bufferDesc;
	memset(&bufferDesc, 0, sizeof(bufferDesc));
	// what type of buffer will this be?
	bufferDesc.BindFlags = D3D11_BIND_VERTEX_BUFFER;
	// what type of usage (press F1, read the docs)
	bufferDesc.Usage = D3D11_USAGE_DEFAULT;
	// how big in bytes each element in the buffer is.
	bufferDesc.ByteWidth = sizeof(PositionVertex) * 6;

	// this struct is created just to set a pointer to the
	// data containing the vertices.
	D3D11_SUBRESOURCE_DATA data;
	data.pSysMem = triangleVertices;

	// create a Vertex Buffer
	gDevice->CreateBuffer(&bufferDesc, &data, &gDeferredQuadBuffer);
}
*/

/*
void RenderBuffers(int *RenderCopies, int amount, bool *drawAllCopies) {
	// clear the back buffer to a deep blue
	//float clearColor[] = { 0.0f, 0.0f, 0.0f, 1.0f };
	float clearColor[] = { 0.45f, 0.95f, 1.0f, 1.0f };
	//float clearColor[] = { 0.3f, 0.3f, 0.3f, 0.0f };

	updateCameraValues();
	setCameraViewProjectionSpace();

	// Clear the render target buffers.
	for (int i = 0; i < G_BUFFER; i++) {
		gDeviceContext->ClearRenderTargetView(gRenderTargetViewArray[i], clearColor);
	}

	float blurClear[] = { 0.0f, 0.0f, 0.0f, 0.0f };
	gDeviceContext->ClearRenderTargetView(gRenderTargetViewArray[4], blurClear);

	// make sure our depth buffer is cleared to black each time we render
	gDeviceContext->ClearDepthStencilView(gDepth, D3D11_CLEAR_DEPTH, 1.0f, 0);

	// Set the sampler state in the pixel shader.
	gDeviceContext->PSSetSamplers(0, 1, &gSampling);

	//bind our constant buffers to coresponding shader
	gDeviceContext->VSSetConstantBuffers(0, 1, &gWorldMatrixBuffer);
	gDeviceContext->GSSetConstantBuffers(0, 1, &gRenderingOptionsBuffer);
	gDeviceContext->GSSetConstantBuffers(1, 1, &gCameraMatrixBuffer);
	gDeviceContext->PSSetConstantBuffers(0, 1, &gAmbientSpecularBuffer);

	//Set heightmap shader options
	SetBlendShaders();

	//load map textures
	for (int i = 0; i < 4; i++) {
		gDeviceContext->PSSetShaderResources(i, 1, &gMapTexturesSRV[i]);
	}

	//set world space for height map and update wvp matrix
	//set specular for height map
	setWorldSpace({ 0.0f,0.0f,0.0f,0.0f,0.0f,0.0f,1.0f,1.0f,1.0f });
	updateCameraWorldViewProjection();
	updateSpecularValues(XMVectorSet(1, 1, 1, 1), XMVectorSet(1, 1, 1, 0.01), XMVectorSet(0.1, 0.1, 0.1, 0.00000010f));

	//Render heightmap
	setVertexBuffer(heightmapBuffer, sizeof(TriangleVertex), 0);
	gDeviceContext->Draw(nrOfHMVert, 0);

	//Release
	for (int i = 0; i < 4; i++) {
		gDeviceContext->PSSetShaderResources(i, 1, &nullSRV[0]);
	}

	//Set object shader options
	SetDeferredShaders();

	WorldSpace copy = { 0.0f, 0.0f, 0.0f, 0.0f, 40.0f, 10.0f, 3.0f, 3.0f, 3.0f };

	//Render objects!
	for (int i = 0; i < nrOfVertexBuffers; i++) {
		//set object texture
		gDeviceContext->PSSetShaderResources(0, 1, &gTextureSRV[i]);

		//set world space for object and update wvp matrix
		//set specular for object
		setWorldSpace(worldObjects[i]);
		updateCameraWorldViewProjection();
		updateSpecularValues(XMVectorSet(gReflection[i].a_r, gReflection[i].a_g, gReflection[i].a_b, 1), XMVectorSet(gReflection[i].d_r, gReflection[i].d_g, gReflection[i].d_b, 1), XMVectorSet(gReflection[i].s_r, gReflection[i].s_g, gReflection[i].s_b, gReflection[i].s_p * 100));

		//Render objects
		setVertexBuffer(ppVertexBuffers[i], sizeof(TriangleVertex), 0);

		gDeviceContext->Draw(gnrOfVert[i], 0);

		if (!i) {
			//Set copy
			setWorldSpace(copy);
			updateCameraWorldViewProjection();

			//Render objects
			gDeviceContext->Draw(gnrOfVert[i], 0);
		}
	}

	//Release
	//for (int i = 0; i < nrOfVertexBuffers; i++)
	//{
	gDeviceContext->PSSetShaderResources(0, 1, &nullSRV[0]);
	//}

	gDeviceContext->VSSetConstantBuffers(0, 1, &nullCB);
	gDeviceContext->GSSetConstantBuffers(0, 1, &nullCB);
	gDeviceContext->GSSetConstantBuffers(1, 1, &nullCB);
	gDeviceContext->PSSetConstantBuffers(0, 1, &nullCB);


	//Compute Gaussian Filter

	if (blurFilter == true) {
		SetComputeShaders();

		gDeviceContext->CSSetShaderResources(0, 1, &gShaderResourceViewArray[4]);
		gDeviceContext->CSSetUnorderedAccessViews(0, 1, &blurUAV, 0);

		gDeviceContext->Dispatch(45, 45, 1);

		//Release

		gDeviceContext->CSSetShaderResources(0, 1, &nullSRV[0]);
		gDeviceContext->CSSetUnorderedAccessViews(0, 1, &nullUAV, 0);

		//Copy resources
		gDeviceContext->CopyResource(gBlurTextureRead, gBlurTextureDraw);
	} else {
		gDeviceContext->CopyResource(gBlurTextureRead, gBlurTextureEmpty);
	}
}
*/

